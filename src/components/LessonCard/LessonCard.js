import React from 'react';

import styles from './LessonCard.module.css';
import '../../assets/lessons/backend-anonce.png';
import '../../assets/lessons/client-server.png';
import '../../assets/Hamburger_icon.svg.png';

const LessonCard = () => {
  return (
    <div>
      <div className={styles.lessonCard}>
        <img src="https://i.ibb.co/Rgfsfxp/backend-anonce.jpg" alt="backend-anonce" border="0" />
        {/* <h2>BACKEND для начинающих</h2> */}
        <p>
          Ближайшие несколько уроков мы рассмотрим основные концепции в разработке серверных приложений и закрепим на
          практике полученные знания.
        </p>

        <p>
          Как вы знаете, Javascript является одним из самых популярных языков программирования. Многие начинают изучение
          ВЕБ именно с него. Пробуют создавать простые сайты и т.д. Поэтому в этом курсе мы будем рассматривать
          бэкенд-разработку на примере NODEJS.{' '}
        </p>
        <p>
          Но при прохождении этого курса мы будем делать акцент не на конкретном языке или фреймворке, а на общих
          концепциях. Концепции разработки бэкенд приложений от языка к языку - примерно одинаковые. Освоив один язык
          или фреймворк, вы с легкостью сможете переключаться на другие, освоив некоторые особенности.
        </p>
        <p>В ходе данного курса мы рассмотрим</p>
        <ul>
          <li>Клиент-серверное взаимодействие</li>
          <li>Основы HTTP протокола</li>
          <li>Понятие RESTfull Api</li>
          <li>CRUD - операции</li>
          <li>Работу с базой данных</li>
          <li>Тестирование с POSTMAN</li>
        </ul>
      </div>
      <div className={styles.lessonCard}>
        <h2>Клиент-серверное взаимодействие. </h2>
        <p>
          Представим несколько человек, которые используют какое-то веб-приложение. Чаще всего это приложение будет
          работать с HTTP-протоколом и использоваться через браузер. В то-же время, существует некое серверное
          приложение с базой данных, разработкой которого мы и займемся в ходе этого курса.
        </p>
        <p>
          Когда пользователь совершает какое то действие, например, отправлет кому-либо сообщени или просматривает
          чью-то аватарку, его браузер отправлет запрос на то самый сервер. Сервер, в свою очереь выполняет определенные
          операции, например сохраняет отправленное пользователем сообщение в базу данных, после чего отправлет на
          клиент ( в браузер пользователя ), ответ. После чего пользователь видит свое сообщение в чате. Другие
          пользователи чата так-же получают сообщение на свое устройство.
        </p>
        <img src="https://i.ibb.co/N3Vmpyk/client-server.png" alt="client-server" border="0"></img>
        <p>
          Теперь поговорим немного об HTTP. HTTP - это протокол прикладного уровня. Он является самым часто используемым
          в веб-разработке. У HTTP запроса существуют следующие методы:
        </p>
        <ul>
          <li>GET - для получения данных с сервера</li>
          <li>POST - для отправки данных на сервер</li>
          <li>PUT - редактирование данных на сервере</li>
          <li>DELETE - удаление данных на сервере</li>
        </ul>
      </div>
    </div>
  );
};

export default LessonCard;
